{"expireTime":9007200855199828000,"key":"gatsby-plugin-mdx-entire-payload-6f534f8713bf86261c05093e84811890-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"O objetivo desta API √©, por meio de jobs agendados pelo node-cron, consultar o banco de dados e salvar os respectivos dados consultados no SCPC Serasa / Boa Vista para faturas de cr√©dito / d√©bito.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":197,"offset":197},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":197,"offset":197},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Instru√ß√µes referente √† API","position":{"start":{"line":4,"column":3,"offset":201},"end":{"line":4,"column":29,"offset":227},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":199},"end":{"line":4,"column":29,"offset":227},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"üîå Preparando o servidor","position":{"start":{"line":6,"column":5,"offset":233},"end":{"line":6,"column":29,"offset":257},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":229},"end":{"line":6,"column":29,"offset":257},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Pr√©-requisitos:","position":{"start":{"line":8,"column":3,"offset":261},"end":{"line":8,"column":18,"offset":276},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":259},"end":{"line":8,"column":20,"offset":278},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":259},"end":{"line":8,"column":20,"offset":278},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"NodeJS >= 12.18.3","position":{"start":{"line":9,"column":3,"offset":281},"end":{"line":9,"column":20,"offset":298},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":281},"end":{"line":9,"column":20,"offset":298},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":279},"end":{"line":9,"column":20,"offset":298},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Yarn >= 1.22.4","position":{"start":{"line":10,"column":3,"offset":301},"end":{"line":10,"column":17,"offset":315},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":301},"end":{"line":10,"column":17,"offset":315},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":299},"end":{"line":10,"column":17,"offset":315},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Docker >= 19.03.8","position":{"start":{"line":11,"column":3,"offset":318},"end":{"line":11,"column":20,"offset":335},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":318},"end":{"line":11,"column":20,"offset":335},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":316},"end":{"line":11,"column":20,"offset":335},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":279},"end":{"line":11,"column":20,"offset":335},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"üîê Rodando a aplica√ß√£o","position":{"start":{"line":13,"column":5,"offset":341},"end":{"line":13,"column":27,"offset":363},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":337},"end":{"line":13,"column":27,"offset":363},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"# Clone o projeto\ngit clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/telecoms-schedule-api\n\n# Entre na pasta\n$ cd telecoms-schedule-api\n\n# Instale as depend√™ncias\n$ yarn # ou opte pelo npm install\n\n# Rode os cont√™iners\n$ sudo docker-compose up -d","position":{"start":{"line":15,"column":1,"offset":365},"end":{"line":27,"column":4,"offset":638},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Comando do Servidor","position":{"start":{"line":29,"column":4,"offset":643},"end":{"line":29,"column":23,"offset":662},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":640},"end":{"line":29,"column":23,"offset":662},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Quando tudo estiver finalizado, inicie o servidor","position":{"start":{"line":31,"column":1,"offset":664},"end":{"line":31,"column":50,"offset":713},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":664},"end":{"line":31,"column":50,"offset":713},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ yarn dev","position":{"start":{"line":32,"column":1,"offset":714},"end":{"line":34,"column":4,"offset":736},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Comando de Build","position":{"start":{"line":36,"column":4,"offset":741},"end":{"line":36,"column":20,"offset":757},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":738},"end":{"line":36,"column":20,"offset":757},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Para buildar a aplica√ß√£o, rode o comando abaixo:","position":{"start":{"line":38,"column":1,"offset":759},"end":{"line":38,"column":49,"offset":807},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":759},"end":{"line":38,"column":49,"offset":807},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ yarn build","position":{"start":{"line":40,"column":1,"offset":809},"end":{"line":42,"column":4,"offset":833},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Uma pasta ","position":{"start":{"line":44,"column":1,"offset":835},"end":{"line":44,"column":11,"offset":845},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"dist","position":{"start":{"line":44,"column":13,"offset":847},"end":{"line":44,"column":17,"offset":851},"indent":[]}}],"position":{"start":{"line":44,"column":11,"offset":845},"end":{"line":44,"column":19,"offset":853},"indent":[]}},{"type":"text","value":" ser√° gerada com o conte√∫do TypeScript transpilado.","position":{"start":{"line":44,"column":19,"offset":853},"end":{"line":44,"column":70,"offset":904},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":835},"end":{"line":44,"column":70,"offset":904},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Introdu√ß√£o\",\"metaTitle\":\"Introdu√ß√£o aos objetivos do projeto\",\"metaDescription\":\"\"}","position":{"start":{"line":47,"column":1,"offset":907},"end":{"line":47,"column":122,"offset":1028},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":47,"column":122,"offset":1028}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introdu√ß√£o\",\n  \"metaTitle\": \"Introdu√ß√£o aos objetivos do projeto\",\n  \"metaDescription\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"O objetivo desta API \\xE9, por meio de jobs agendados pelo node-cron, consultar o banco de dados e salvar os respectivos dados consultados no SCPC Serasa / Boa Vista para faturas de cr\\xE9dito / d\\xE9bito.\"), mdx(\"h1\", null, \"Instru\\xE7\\xF5es referente \\xE0 API\"), mdx(\"h3\", null, \"\\uD83D\\uDD0C Preparando o servidor\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pr\\xE9-requisitos:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NodeJS >= 12.18.3\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Yarn >= 1.22.4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Docker >= 19.03.8\")), mdx(\"h3\", null, \"\\uD83D\\uDD10 Rodando a aplica\\xE7\\xE3o\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Clone o projeto\\ngit clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/telecoms-schedule-api\\n\\n# Entre na pasta\\n$ cd telecoms-schedule-api\\n\\n# Instale as depend\\xEAncias\\n$ yarn # ou opte pelo npm install\\n\\n# Rode os cont\\xEAiners\\n$ sudo docker-compose up -d\\n\")), mdx(\"h2\", null, \"Comando do Servidor\"), mdx(\"p\", null, \"Quando tudo estiver finalizado, inicie o servidor\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn dev\\n\")), mdx(\"h2\", null, \"Comando de Build\"), mdx(\"p\", null, \"Para buildar a aplica\\xE7\\xE3o, rode o comando abaixo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ yarn build\\n\")), mdx(\"p\", null, \"Uma pasta \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dist\"), \" ser\\xE1 gerada com o conte\\xFAdo TypeScript transpilado.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Introdu√ß√£o\",\n  \"metaTitle\": \"Introdu√ß√£o aos objetivos do projeto\",\n  \"metaDescription\": \"\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`O objetivo desta API √©, por meio de jobs agendados pelo node-cron, consultar o banco de dados e salvar os respectivos dados consultados no SCPC Serasa / Boa Vista para faturas de cr√©dito / d√©bito.`}</p>\n    <h1>{`Instru√ß√µes referente √† API`}</h1>\n    <h3>{`üîå Preparando o servidor`}</h3>\n    <p><strong parentName=\"p\">{`Pr√©-requisitos:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`NodeJS >= 12.18.3`}</li>\n      <li parentName=\"ul\">{`Yarn >= 1.22.4`}</li>\n      <li parentName=\"ul\">{`Docker >= 19.03.8`}</li>\n    </ul>\n    <h3>{`üîê Rodando a aplica√ß√£o`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Clone o projeto\ngit clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/telecoms-schedule-api\n\n# Entre na pasta\n$ cd telecoms-schedule-api\n\n# Instale as depend√™ncias\n$ yarn # ou opte pelo npm install\n\n# Rode os cont√™iners\n$ sudo docker-compose up -d\n`}</code></pre>\n    <h2>{`Comando do Servidor`}</h2>\n    <p>{`Quando tudo estiver finalizado, inicie o servidor`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ yarn dev\n`}</code></pre>\n    <h2>{`Comando de Build`}</h2>\n    <p>{`Para buildar a aplica√ß√£o, rode o comando abaixo:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ yarn build\n`}</code></pre>\n    <p>{`Uma pasta `}<strong parentName=\"p\">{`dist`}</strong>{` ser√° gerada com o conte√∫do TypeScript transpilado.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}